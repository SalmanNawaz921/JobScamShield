import Logo from "@/assets/Logo";
import { Info, ShieldAlert, AlertCircle, CheckCircle2, Copy } from "lucide-react";
import { message as antdMessage } from "antd";
import { useState } from "react";

const iconMap = {
  summary: <Info className="w-5 h-5 text-blue-500" />,
  score: <ShieldAlert className="w-5 h-5 text-purple-500" />,
  warning: <AlertCircle className="w-5 h-5 text-red-500" />,
  advice: <CheckCircle2 className="w-5 h-5 text-green-500" />,
};

const labelMap = {
  summary: "Summary",
  score: "Scam Score",
  warning: "Warning",
  advice: "Advice",
};

const BotResponse = ({ responseData, sender }) => {
  const [hovering, setHovering] = useState(false);

  // Join all content texts together for copying
  const copyContent = responseData.map(item => item.content).join("\n\n");

  const handleCopy = () => {
    navigator.clipboard.writeText(copyContent);
    antdMessage.success("Response copied!");
  };

  return (
    <div
      className="relative flex flex-col gap-4 p-4"
      onMouseEnter={() => setHovering(true)}
      onMouseLeave={() => setHovering(false)}
    >
      <Logo />

      {/* Floating copy button */}
      {hovering && (
        <button
          onClick={handleCopy}
          className="absolute top-4 right-4 p-2 rounded-lg backdrop-blur bg-white/10 border border-white/20 hover:bg-white/20 transition"
        >
          <Copy className="w-5 h-5 text-gray-300" />
        </button>
      )}

      {responseData.map((item, index) => (
        <div key={index} className="flex flex-col gap-2">
          {/* Header */}
          {item.type !== "section" &&
            item.type !== "footer" &&
            item.type !== "header" && (
              <div className="flex items-center gap-2">
                {iconMap[item.type] || (
                  <Info className="w-5 h-5 text-gray-400" />
                )}
                <h3 className="text-sm font-semibold text-white">
                  {labelMap[item.type] || "Information"}
                </h3>
              </div>
            )}

          {/* Content */}
          <p
            className={`text-sm ${
              item.isCritical ? "text-red-400 font-medium" : "text-gray-200"
            }`}
            style={{ whiteSpace: "pre-wrap" }}
          >
            {item.content}
          </p>

          {/* Divider */}
          {index !== responseData.length - 1 && (
            <div className="border-b border-white/20"></div>
          )}
        </div>
      ))}

      <p className="text-gray-400 text-xs">
        Generated by <span className="text-blue-500">JobScamShield</span>
      </p>
    </div>
  );
};

export default BotResponse;
